Thu Jul 2 2020 : 21:33:30: Logging request body data about to be sent to ICIMS:
Thu Jul 2 2020 : 21:33:30: -------------------------------------------------------------
Thu Jul 2 2020 : 21:33:30: {
    "resourceType": "Bundle",
    "id": "53fd816e-5838-4144-83ce-e8751da154e1",
    "type": "message",
    "meta": {
        "profile": [
            "https://www.icims.com.au/fhir/StructureDefinition/icims-message-bundle"
        ]
    },
    "entry": [
        {
            "fullUrl": "urn:uuid:20200702-689837.E.4624",
            "resource": {
                "resourceType": "MessageHeader",
                "id": "20200702-689837.E.4624",
                "meta": {
                    "profile": [
                        "https://www.icims.com.au/fhir/StructureDefinition/icims-messageHeader"
                    ]
                },
                "event": {
                    "code": "diagnosticreport-provide",
                    "system": "http://hl7.org/fhir/message-events",
                    "display": "diagnosticreport-provide"
                },
                "destination": {
                    "name": "CliniSearch",
                    "endpoint": "http://CliniSearch.sah.com:9000/fhir"
                },
                "timestamp": "2020-07-02T10:06:00+10:00",
                "receiver": {
                    "reference": "Organization/bab13701-776a-41fd-86a9-7aa19df2825d",
                    "display": "ICIMS"
                },
                "sender": {
                    "reference": "Organization/dfc54194-06d4-4fb4-afad-773a8cd4175b",
                    "display": "DHM"
                },
                "source": {
                    "name": "BIZTALK"
                },
                "extension": {
                    "url": "http://hl7.org/fhir/StructureDefinition/messageheader-response-request",
                    "valueCode": "on-error"
                }
            }
        },
        {
            "fullUrl": "urn:uuid:16525e32-53ad-438b-8849-5464a95a912a",
            "resource": {
                "resourceType": "DiagnosticReport",
                "id": "16525e32-53ad-438b-8849-5464a95a912a",
                "text": {
                    "status": "additional",
                    "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\">\n  <pre>\n Start of Report: *** Result is provisional. Finalised report to follow. ***\n\n Clinical Notes : ENDOSCOPY WATERS3\n\n \n  TYPE OF SCOPE        \n \n  SERIAL NUMBER        826\n \n  Culture              1-10 cfu Gastrointestinal tract organisms\n  Comment on Lab ID 841542810\n \n  26 colonies of Pseudomonas sp. isolated.\n  Further report to follow.\n \n  \n  \n  *** The above result is provisional. Finalised report to follow. ***\n  \n  NATA Accreditation No 2178\n\n End of Report  :\n\n  </pre>\n</div>"
                },
                "meta": {
                    "profile": [
                        "https://www.icims.com.au/fhir/StructureDefinition/icims-diagnosticReport"
                    ]
                },
                "identifier": [
                    {
                        "use": "official",
                        "type": {
                            "coding": {
                                "code": "FILL",
                                "system": "http://hl7.org/fhir/identifier-type",
                                "display": "Filler Identifier"
                            },
                            "text": "Report Identifier"
                        },
                        "system": "http://www.dhm.com.au/fhir/pathology/fillerOrderNumber",
                        "value": "841542810-M901P"
                    }
                ],
                "basedOn": [
                    {
                        "reference": "ProcedureRequest/c9070140-d986-44c4-8c21-39411f0cc5be",
                        "display": "ProcedureRequest"
                    }
                ],
                "status": "final",
                "category": {
                    "coding": {
                        "code": "MB",
                        "system": "http://hl7.org/fhir/v2/0074"
                    },
                    "text": "Diagnostic Service Section Codes"
                },
                "code": {
                    "coding": {
                        "code": "M901P",
                        "system": "http://www.dhm.com.au/fhir/pathology/reportPanelCode",
                        "display": "ENDOSCOPE 1"
                    }
                },
                "effectiveDateTime": "2020-06-30T14:50:00+10:00",
                "issued": "2020-07-02T10:06:00+10:00"
            }
        },
        {
            "fullUrl": "urn:uuid:a18e726f-dace-42b2-9010-de1de4eb77a0",
            "resource": {
                "resourceType": "Practitioner",
                "id": "a18e726f-dace-42b2-9010-de1de4eb77a0",
                "identifier": [
                    {
                        "use": "official",
                        "type": {
                            "coding": {
                                "code": "UPIN",
                                "system": "http://terminology.hl7.org.au/CodeSystem/v2-0203",
                                "display": "Medicare Provider Number"
                            }
                        },
                        "system": "http://ns.electronichealth.net.au/id/medicare-provider-number",
                        "value": "0000000Y"
                    }
                ],
                "name": [
                    {
                        "use": "official",
                        "text": "NURSE UNIT MANAGER, .",
                        "family": "NURSE UNIT MANAGER",
                        "given": "."
                    }
                ]
            }
        },
        {
            "fullUrl": "urn:uuid:c9070140-d986-44c4-8c21-39411f0cc5be",
            "resource": {
                "resourceType": "ProcedureRequest",
                "id": "c9070140-d986-44c4-8c21-39411f0cc5be",
                "meta": {
                    "profile": [
                        "https://www.icims.com.au/fhir/StructureDefinition/icims-procedureRequest"
                    ]
                },
                "status": "active",
                "intent": "order",
                "requester": {
                    "agent": {
                        "reference": "Practitioner/a18e726f-dace-42b2-9010-de1de4eb77a0",
                        "display": "NURSE UNIT MANAGER, ."
                    }
                }
            }
        },
        {
            "fullUrl": "urn:uuid:e517243e-4d90-44ef-b00c-b3127077d37b",
            "resource": {
                "resourceType": "Patient",
                "id": "e517243e-4d90-44ef-b00c-b3127077d37b",
                "meta": {
                    "profile": [
                        "http://hl7.org.au/fhir/StructureDefinition/au-patient",
                        "https://www.icims.com.au/fhir/StructureDefinition/icims-patient"
                    ]
                },
                "identifier": [
                    {
                        "use": "official",
                        "type": {
                            "coding": {
                                "code": "MR",
                                "system": "http://hl7.org/fhir/v2/0203",
                                "display": "Medical record number"
                            },
                            "text": "Medical record number"
                        },
                        "system": "https://www.sah.org.au/systems/fhir/pas/medical-record-number",
                        "value": "921105"
                    }
                ],
                "name": [
                    {
                        "use": "official",
                        "text": "ENVIRONMENT, HOSPITAL",
                        "family": "ENVIRONMENT",
                        "given": "HOSPITAL"
                    }
                ],
                "gender": "unknown",
                "birthDate": "1906-06-06"
            }
        },
        {
            "fullUrl": "urn:uuid:bab13701-776a-41fd-86a9-7aa19df2825d",
            "resource": {
                "resourceType": "Organization",
                "id": "bab13701-776a-41fd-86a9-7aa19df2825d",
                "meta": {
                    "profile": [
                        "http://hl7.org.au/fhir/StructureDefinition/au-organisation",
                        "https://www.icims.com.au/fhir/StructureDefinition/icims-organization"
                    ]
                },
                "name": "ICIMS",
                "alias": [
                    "Innovative Clinical Information Management Systems"
                ]
            }
        },
        {
            "fullUrl": "urn:uuid:dfc54194-06d4-4fb4-afad-773a8cd4175b",
            "resource": {
                "resourceType": "Organization",
                "id": "dfc54194-06d4-4fb4-afad-773a8cd4175b",
                "meta": {
                    "profile": [
                        "http://hl7.org.au/fhir/StructureDefinition/au-organisation",
                        "https://www.icims.com.au/fhir/StructureDefinition/icims-organization"
                    ]
                },
                "name": "DHM",
                "alias": [
                    "DHM",
                    "Douglass Hanly Moir",
                    "Sonic Pathology"
                ]
            }
        },
        {
            "fullUrl": "urn:uuid:92651b0e-c73e-40c3-9aca-5af4d513ba52",
            "resource": {
                "resourceType": "Provenance",
                "id": "92651b0e-c73e-40c3-9aca-5af4d513ba52",
                "meta": {
                    "profile": [
                        "https://www.icims.com.au/fhir/StructureDefinition/icims-provenance"
                    ]
                },
                "target": [
                    {
                        "reference": "MessageHeader/20200702-689837.E.4624",
                        "display": "MessageHeader"
                    },
                    {
                        "reference": "Patient/e517243e-4d90-44ef-b00c-b3127077d37b",
                        "display": "Patient"
                    },
                    {
                        "reference": "DiagnosticReport/16525e32-53ad-438b-8849-5464a95a912a",
                        "display": "DiagnosticReport"
                    },
                    {
                        "reference": "Practitioner/a18e726f-dace-42b2-9010-de1de4eb77a0",
                        "display": "Practitioner"
                    },
                    {
                        "reference": "ProcedureRequest/c9070140-d986-44c4-8c21-39411f0cc5be",
                        "display": "ProcedureRequest"
                    },
                    {
                        "reference": "Organization/bab13701-776a-41fd-86a9-7aa19df2825d",
                        "display": "Organization ICIMS"
                    },
                    {
                        "reference": "Organization/dfc54194-06d4-4fb4-afad-773a8cd4175b",
                        "display": "Organization DHM"
                    }
                ],
                "recorded": "2020-07-02T21:33:30.054+10:00",
                "activity": {
                    "code": "CREATE",
                    "system": "http://hl7.org/fhir/v3/DataOperation",
                    "display": "create"
                },
                "agent": {
                    "whoReference": {
                        "reference": "undefined/undefined",
                        "display": "HL7 Connect Integration Engine"
                    },
                    "onBehalfOfReference": {
                        "reference": "Organization/bab13701-776a-41fd-86a9-7aa19df2825d",
                        "display": "ICIMS"
                    }
                },
                "entity": {
                    "role": "source",
                    "whatIdentifier": {
                        "use": "official",
                        "system": "http://www.dhm.com.au/fhir/pathology/hl7-v2/message-control-id",
                        "value": "20200702-689837.E.4624"
                    }
                }
            }
        }
    ]
}
Thu Jul 2 2020 : 21:33:31: Unable to paser ICIMS JSON error, raw data was:
Thu Jul 2 2020 : 21:33:31: -------------------------------------------------------------
Thu Jul 2 2020 : 21:33:31: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>AssertionError: str object is expected. // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not by accident trigger a request to /favicon.ico which might
         change the application state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js"></script>
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 104753616,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "hUAL7KVEjKf9w2b71WfV";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AssertionError</h1>
<div class="detail">
  <p class="errormsg">AssertionError: str object is expected.</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  
  <ul><li><div class="frame" id="frame-104753712">
  <h4>File <cite class="filename">"C:\Program Files (x86)\Python27\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">2463</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def __call__(self, environ, start_response):</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def __repr__(self):</pre>
<pre class="line after"><span class="ws">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>
</div>

<li><div class="frame" id="frame-104753936">
  <h4>File <cite class="filename">"C:\Program Files (x86)\Python27\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">2449</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-104753872">
  <h4>File <cite class="filename">"C:\Program Files (x86)\Python27\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1866</em>,
      in <code class="function">handle_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span># if we want to repropagate the exception, we can attempt to</pre>
<pre class="line before"><span class="ws">            </span># raise it with the whole traceback in case we can do that</pre>
<pre class="line before"><span class="ws">            </span># (the function was actually called from the except part)</pre>
<pre class="line before"><span class="ws">            </span># otherwise, we just raise the error again</pre>
<pre class="line before"><span class="ws">            </span>if exc_value is e:</pre>
<pre class="line current"><span class="ws">                </span>reraise(exc_type, exc_value, tb)</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>raise e</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>self.log_exception((exc_type, exc_value, tb))</pre>
<pre class="line after"><span class="ws">        </span>server_error = InternalServerError()</pre></div>
</div>

<li><div class="frame" id="frame-104753968">
  <h4>File <cite class="filename">"C:\Program Files (x86)\Python27\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">2446</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-104754000">
  <h4>File <cite class="filename">"C:\Program Files (x86)\Python27\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1951</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>
<pre class="line after"><span class="ws">        </span>the request by converting it into a response and invoking the</pre></div>
</div>

<li><div class="frame" id="frame-104754032">
  <h4>File <cite class="filename">"C:\Program Files (x86)\Python27\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1820</em>,
      in <code class="function">handle_user_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return self.handle_http_exception(e)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>handler = self._find_error_handler(e)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if handler is None:</pre>
<pre class="line current"><span class="ws">            </span>reraise(exc_type, exc_value, tb)</pre>
<pre class="line after"><span class="ws">        </span>return handler(e)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def handle_exception(self, e):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>
<pre class="line after"><span class="ws">        </span>associated with it, or that was raised from an error handler.</pre></div>
</div>

<li><div class="frame" id="frame-104754064">
  <h4>File <cite class="filename">"C:\Program Files (x86)\Python27\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1949</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>
</div>

<li><div class="frame" id="frame-104754096">
  <h4>File <cite class="filename">"C:\Program Files (x86)\Python27\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1935</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-104754128">
  <h4>File <cite class="filename">"C:\CliniSearchSAH\CliniSearchFeed\fhir_listener.py"</cite>,
      line <em class="line">34</em>,
      in <code class="function">default</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>def default():</pre>
<pre class="line before"><span class="ws">    </span>payload = request.get_json()</pre>
<pre class="line before"><span class="ws">    </span>app.logger.info(&quot;/fhir/$process-message: %s&quot; % str(payload))</pre>
<pre class="line before"><span class="ws">    </span>fd, file_path = tempfile.mkstemp(prefix='.', suffix='-temp.json', dir=input_index_folder)</pre>
<pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line current"><span class="ws">        </span>payload_bundle = resource.from_message(payload)</pre>
<pre class="line after"><span class="ws">        </span># get document ID from the FHIR Bundle</pre>
<pre class="line after"><span class="ws">        </span>document_id = payload_bundle.id_</pre>
<pre class="line after"><span class="ws">        </span>if not document_id:</pre>
<pre class="line after"><span class="ws">            </span>error = resource.get_operation_outcome(&quot;error&quot;, &quot;exception&quot;, &quot;FHIR Bundle ID is None&quot;)</pre>
<pre class="line after"><span class="ws">            </span>app.logger.error(json.dumps(error))</pre></div>
</div>

<li><div class="frame" id="frame-104754160">
  <h4>File <cite class="filename">"C:\CliniSearchSAH\CliniSearchEngine_new\fhir\resource.py"</cite>,
      line <em class="line">808</em>,
      in <code class="function">from_message</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>full_url = item[&quot;fullUrl&quot;]</pre>
<pre class="line before"><span class="ws">        </span>resource = item[&quot;resource&quot;]</pre>
<pre class="line before"><span class="ws">        </span>entry.append(</pre>
<pre class="line before"><span class="ws">            </span>{</pre>
<pre class="line before"><span class="ws">                </span>&quot;fullUrl&quot;: full_url,</pre>
<pre class="line current"><span class="ws">                </span>&quot;resource&quot;: handler[resource[&quot;resourceType&quot;]](resource),</pre>
<pre class="line after"><span class="ws">            </span>}</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">    </span>return Bundle(message[&quot;id&quot;], meta, entry)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-104754192">
  <h4>File <cite class="filename">"C:\CliniSearchSAH\CliniSearchEngine_new\fhir\resource.py"</cite>,
      line <em class="line">778</em>,
      in <code class="function">from_dict</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>if &quot;identifier&quot; in message.keys():</pre>
<pre class="line before"><span class="ws">            </span>args[&quot;identifier&quot;] = message[&quot;identifier&quot;]</pre>
<pre class="line before"><span class="ws">        </span>if &quot;name&quot; in message.keys():</pre>
<pre class="line before"><span class="ws">            </span>args[&quot;name&quot;] = message[&quot;name&quot;]</pre>
<pre class="line before"><span class="ws">        </span>return Practitioner(message[&quot;id&quot;],</pre>
<pre class="line current"><span class="ws">                            </span>**args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>class OperationOutcome(Resource):</pre>
<pre class="line after"><span class="ws">    </span>pass</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-104754224">
  <h4>File <cite class="filename">"C:\CliniSearchSAH\CliniSearchEngine_new\fhir\resource.py"</cite>,
      line <em class="line">731</em>,
      in <code class="function">__init__</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>if kw == &quot;identifier&quot;:</pre>
<pre class="line before"><span class="ws">                </span>for i in kwargs[kw]:</pre>
<pre class="line before"><span class="ws">                    </span>self.add_identifier(i[&quot;use&quot;], i[&quot;type&quot;], i[&quot;system&quot;], i[&quot;value&quot;])</pre>
<pre class="line before"><span class="ws">            </span>elif kw == &quot;name&quot;:</pre>
<pre class="line before"><span class="ws">                </span>for n in kwargs[kw]:</pre>
<pre class="line current"><span class="ws">                    </span>self.add_name(n[&quot;use&quot;], n[&quot;text&quot;], n[&quot;family&quot;], n[&quot;given&quot;], n.get(&quot;prefix&quot;, &quot;&quot;))</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def add_identifier(self, use, type_, system, value):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(use, str), &quot;Str object is expected.&quot;</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(type_, dict), &quot;dict object is expected.&quot;</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(system, str), &quot;str object is expected.&quot;</pre></div>
</div>

<li><div class="frame" id="frame-104754256">
  <h4>File <cite class="filename">"C:\CliniSearchSAH\CliniSearchEngine_new\fhir\resource.py"</cite>,
      line <em class="line">745</em>,
      in <code class="function">add_name</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>def add_name(self, use, text, family, given, prefix):</pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(use, str), &quot;Str object is expected.&quot;</pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(text, str), &quot;Str object is expected.&quot;</pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(family, str), &quot;str object is expected.&quot;</pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(given, str), &quot;str object is expected.&quot;</pre>
<pre class="line current"><span class="ws">        </span>assert isinstance(prefix, str), &quot;str object is expected.&quot;</pre>
<pre class="line after"><span class="ws">        </span>self.name.append({&quot;use&quot;: use, &quot;text&quot;: text, &quot;family&quot;: family, &quot;given&quot;: given, &quot;prefix&quot;: prefix})</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def get_referrer_code(self):</pre>
<pre class="line after"><span class="ws">        </span>for i in self.identifier:</pre>
<pre class="line after"><span class="ws">            </span>if i[&quot;use&quot;] == &quot;official&quot; and i[&quot;type&quot;][&quot;coding&quot;][&quot;code&quot;] == &quot;UPIN&quot;:</pre></div>
</div>
</ul>
  <blockquote>AssertionError: str object is expected.</blockquote>
</div>

<div class="plain">
  <form action="/?__debugger__=yes&amp;cmd=paste" method="post">
    <p>
      <input type="hidden" name="language" value="pytb">
      This is the Copy/Paste friendly version of the traceback.  <span
      class="pastemessage">You can also paste this traceback into
      a <a href="https://gist.github.com/">gist</a>:
      <input type="submit" value="create paste"></span>
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;C:\Program Files (x86)\Python27\lib\site-packages\flask\app.py&quot;, line 2463, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;C:\Program Files (x86)\Python27\lib\site-packages\flask\app.py&quot;, line 2449, in wsgi_app
    response = self.handle_exception(e)
  File &quot;C:\Program Files (x86)\Python27\lib\site-packages\flask\app.py&quot;, line 1866, in handle_exception
    reraise(exc_type, exc_value, tb)
  File &quot;C:\Program Files (x86)\Python27\lib\site-packages\flask\app.py&quot;, line 2446, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;C:\Program Files (x86)\Python27\lib\site-packages\flask\app.py&quot;, line 1951, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;C:\Program Files (x86)\Python27\lib\site-packages\flask\app.py&quot;, line 1820, in handle_user_exception
    reraise(exc_type, exc_value, tb)
  File &quot;C:\Program Files (x86)\Python27\lib\site-packages\flask\app.py&quot;, line 1949, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;C:\Program Files (x86)\Python27\lib\site-packages\flask\app.py&quot;, line 1935, in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
  File &quot;C:\CliniSearchSAH\CliniSearchFeed\fhir_listener.py&quot;, line 34, in default
    payload_bundle = resource.from_message(payload)
  File &quot;C:\CliniSearchSAH\CliniSearchEngine_new\fhir\resource.py&quot;, line 808, in from_message
    &quot;resource&quot;: handler[resource[&quot;resourceType&quot;]](resource),
  File &quot;C:\CliniSearchSAH\CliniSearchEngine_new\fhir\resource.py&quot;, line 778, in from_dict
    **args)
  File &quot;C:\CliniSearchSAH\CliniSearchEngine_new\fhir\resource.py&quot;, line 731, in __init__
    self.add_name(n[&quot;use&quot;], n[&quot;text&quot;], n[&quot;family&quot;], n[&quot;given&quot;], n.get(&quot;prefix&quot;, &quot;&quot;))
  File &quot;C:\CliniSearchSAH\CliniSearchEngine_new\fhir\resource.py&quot;, line 745, in add_name
    assert isinstance(prefix, str), &quot;str object is expected.&quot;
AssertionError: str object is expected.</textarea>
  </form>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Program Files (x86)\Python27\lib\site-packages\flask\app.py", line 2463, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Program Files (x86)\Python27\lib\site-packages\flask\app.py", line 2449, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Program Files (x86)\Python27\lib\site-packages\flask\app.py", line 1866, in handle_exception
    reraise(exc_type, exc_value, tb)
  File "C:\Program Files (x86)\Python27\lib\site-packages\flask\app.py", line 2446, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Program Files (x86)\Python27\lib\site-packages\flask\app.py", line 1951, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Program Files (x86)\Python27\lib\site-packages\flask\app.py", line 1820, in handle_user_exception
    reraise(exc_type, exc_value, tb)
  File "C:\Program Files (x86)\Python27\lib\site-packages\flask\app.py", line 1949, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Program Files (x86)\Python27\lib\site-packages\flask\app.py", line 1935, in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
  File "C:\CliniSearchSAH\CliniSearchFeed\fhir_listener.py", line 34, in default
    payload_bundle = resource.from_message(payload)
  File "C:\CliniSearchSAH\CliniSearchEngine_new\fhir\resource.py", line 808, in from_message
    "resource": handler[resource["resourceType"]](resource),
  File "C:\CliniSearchSAH\CliniSearchEngine_new\fhir\resource.py", line 778, in from_dict
    **args)
  File "C:\CliniSearchSAH\CliniSearchEngine_new\fhir\resource.py", line 731, in __init__
    self.add_name(n["use"], n["text"], n["family"], n["given"], n.get("prefix", ""))
  File "C:\CliniSearchSAH\CliniSearchEngine_new\fhir\resource.py", line 745, in add_name
    assert isinstance(prefix, str), "str object is expected."
AssertionError: str object is expected.

-->

Thu Jul 2 2020 : 21:33:31: ICIMS HTTP failed HTTP Status: 500, State: Script, Msg: Unable to paser ICIMS JSON error.
Thu Jul 2 2020 : 21:33:31: ICIMS HTTP Error Message: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>AssertionError: str object is expected. // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not by accident trigger a request to /favicon.ico which might
         change the application state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js"></script>
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 104753616,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "hUAL7KVEjKf9w2b71WfV";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AssertionError</h1>
<div class="detail">
  <p class="errormsg">AssertionError: str object is expected.</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  
  <ul><li><div class="frame" id="frame-104753712">
  <h4>File <cite class="filename">"C:\Program Files (x86)\Python27\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">2463</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def __call__(self, environ, start_response):</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def __repr__(self):</pre>
<pre class="line after"><span class="ws">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>
</div>

<li><div class="frame" id="frame-104753936">
  <h4>File <cite class="filename">"C:\Program Files (x86)\Python27\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">2449</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-104753872">
  <h4>File <cite class="filename">"C:\Program Files (x86)\Python27\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1866</em>,
      in <code class="function">handle_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span># if we want to repropagate the exception, we can attempt to</pre>
<pre class="line before"><span class="ws">            </span># raise it with the whole traceback in case we can do that</pre>
<pre class="line before"><span class="ws">            </span># (the function was actually called from the except part)</pre>
<pre class="line before"><span class="ws">            </span># otherwise, we just raise the error again</pre>
<pre class="line before"><span class="ws">            </span>if exc_value is e:</pre>
<pre class="line current"><span class="ws">                </span>reraise(exc_type, exc_value, tb)</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>raise e</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>self.log_exception((exc_type, exc_value, tb))</pre>
<pre class="line after"><span class="ws">        </span>server_error = InternalServerError()</pre></div>
</div>

<li><div class="frame" id="frame-104753968">
  <h4>File <cite class="filename">"C:\Program Files (x86)\Python27\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">2446</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-104754000">
  <h4>File <cite class="filename">"C:\Program Files (x86)\Python27\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1951</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>
<pre class="line after"><span class="ws">        </span>the request by converting it into a response and invoking the</pre></div>
</div>

<li><div class="frame" id="frame-104754032">
  <h4>File <cite class="filename">"C:\Program Files (x86)\Python27\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1820</em>,
      in <code class="function">handle_user_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return self.handle_http_exception(e)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>handler = self._find_error_handler(e)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if handler is None:</pre>
<pre class="line current"><span class="ws">            </span>reraise(exc_type, exc_value, tb)</pre>
<pre class="line after"><span class="ws">        </span>return handler(e)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def handle_exception(self, e):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>
<pre class="line after"><span class="ws">        </span>associated with it, or that was raised from an error handler.</pre></div>
</div>

<li><div class="frame" id="frame-104754064">
  <h4>File <cite class="filename">"C:\Program Files (x86)\Python27\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1949</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>
</div>

<li><div class="frame" id="frame-104754096">
  <h4>File <cite class="filename">"C:\Program Files (x86)\Python27\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1935</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-104754128">
  <h4>File <cite class="filename">"C:\CliniSearchSAH\CliniSearchFeed\fhir_listener.py"</cite>,
      line <em class="line">34</em>,
      in <code class="function">default</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>def default():</pre>
<pre class="line before"><span class="ws">    </span>payload = request.get_json()</pre>
<pre class="line before"><span class="ws">    </span>app.logger.info(&quot;/fhir/$process-message: %s&quot; % str(payload))</pre>
<pre class="line before"><span class="ws">    </span>fd, file_path = tempfile.mkstemp(prefix='.', suffix='-temp.json', dir=input_index_folder)</pre>
<pre class="line before"><span class="ws">    </span>try:</pre>
<pre class="line current"><span class="ws">        </span>payload_bundle = resource.from_message(payload)</pre>
<pre class="line after"><span class="ws">        </span># get document ID from the FHIR Bundle</pre>
<pre class="line after"><span class="ws">        </span>document_id = payload_bundle.id_</pre>
<pre class="line after"><span class="ws">        </span>if not document_id:</pre>
<pre class="line after"><span class="ws">            </span>error = resource.get_operation_outcome(&quot;error&quot;, &quot;exception&quot;, &quot;FHIR Bundle ID is None&quot;)</pre>
<pre class="line after"><span class="ws">            </span>app.logger.error(json.dumps(error))</pre></div>
</div>

<li><div class="frame" id="frame-104754160">
  <h4>File <cite class="filename">"C:\CliniSearchSAH\CliniSearchEngine_new\fhir\resource.py"</cite>,
      line <em class="line">808</em>,
      in <code class="function">from_message</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>full_url = item[&quot;fullUrl&quot;]</pre>
<pre class="line before"><span class="ws">        </span>resource = item[&quot;resource&quot;]</pre>
<pre class="line before"><span class="ws">        </span>entry.append(</pre>
<pre class="line before"><span class="ws">            </span>{</pre>
<pre class="line before"><span class="ws">                </span>&quot;fullUrl&quot;: full_url,</pre>
<pre class="line current"><span class="ws">                </span>&quot;resource&quot;: handler[resource[&quot;resourceType&quot;]](resource),</pre>
<pre class="line after"><span class="ws">            </span>}</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">    </span>return Bundle(message[&quot;id&quot;], meta, entry)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-104754192">
  <h4>File <cite class="filename">"C:\CliniSearchSAH\CliniSearchEngine_new\fhir\resource.py"</cite>,
      line <em class="line">778</em>,
      in <code class="function">from_dict</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>if &quot;identifier&quot; in message.keys():</pre>
<pre class="line before"><span class="ws">            </span>args[&quot;identifier&quot;] = message[&quot;identifier&quot;]</pre>
<pre class="line before"><span class="ws">        </span>if &quot;name&quot; in message.keys():</pre>
<pre class="line before"><span class="ws">            </span>args[&quot;name&quot;] = message[&quot;name&quot;]</pre>
<pre class="line before"><span class="ws">        </span>return Practitioner(message[&quot;id&quot;],</pre>
<pre class="line current"><span class="ws">                            </span>**args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>class OperationOutcome(Resource):</pre>
<pre class="line after"><span class="ws">    </span>pass</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-104754224">
  <h4>File <cite class="filename">"C:\CliniSearchSAH\CliniSearchEngine_new\fhir\resource.py"</cite>,
      line <em class="line">731</em>,
      in <code class="function">__init__</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>if kw == &quot;identifier&quot;:</pre>
<pre class="line before"><span class="ws">                </span>for i in kwargs[kw]:</pre>
<pre class="line before"><span class="ws">                    </span>self.add_identifier(i[&quot;use&quot;], i[&quot;type&quot;], i[&quot;system&quot;], i[&quot;value&quot;])</pre>
<pre class="line before"><span class="ws">            </span>elif kw == &quot;name&quot;:</pre>
<pre class="line before"><span class="ws">                </span>for n in kwargs[kw]:</pre>
<pre class="line current"><span class="ws">                    </span>self.add_name(n[&quot;use&quot;], n[&quot;text&quot;], n[&quot;family&quot;], n[&quot;given&quot;], n.get(&quot;prefix&quot;, &quot;&quot;))</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def add_identifier(self, use, type_, system, value):</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(use, str), &quot;Str object is expected.&quot;</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(type_, dict), &quot;dict object is expected.&quot;</pre>
<pre class="line after"><span class="ws">        </span>assert isinstance(system, str), &quot;str object is expected.&quot;</pre></div>
</div>

<li><div class="frame" id="frame-104754256">
  <h4>File <cite class="filename">"C:\CliniSearchSAH\CliniSearchEngine_new\fhir\resource.py"</cite>,
      line <em class="line">745</em>,
      in <code class="function">add_name</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>def add_name(self, use, text, family, given, prefix):</pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(use, str), &quot;Str object is expected.&quot;</pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(text, str), &quot;Str object is expected.&quot;</pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(family, str), &quot;str object is expected.&quot;</pre>
<pre class="line before"><span class="ws">        </span>assert isinstance(given, str), &quot;str object is expected.&quot;</pre>
<pre class="line current"><span class="ws">        </span>assert isinstance(prefix, str), &quot;str object is expected.&quot;</pre>
<pre class="line after"><span class="ws">        </span>self.name.append({&quot;use&quot;: use, &quot;text&quot;: text, &quot;family&quot;: family, &quot;given&quot;: given, &quot;prefix&quot;: prefix})</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def get_referrer_code(self):</pre>
<pre class="line after"><span class="ws">        </span>for i in self.identifier:</pre>
<pre class="line after"><span class="ws">            </span>if i[&quot;use&quot;] == &quot;official&quot; and i[&quot;type&quot;][&quot;coding&quot;][&quot;code&quot;] == &quot;UPIN&quot;:</pre></div>
</div>
</ul>
  <blockquote>AssertionError: str object is expected.</blockquote>
</div>

<div class="plain">
  <form action="/?__debugger__=yes&amp;cmd=paste" method="post">
    <p>
      <input type="hidden" name="language" value="pytb">
      This is the Copy/Paste friendly version of the traceback.  <span
      class="pastemessage">You can also paste this traceback into
      a <a href="https://gist.github.com/">gist</a>:
      <input type="submit" value="create paste"></span>
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;C:\Program Files (x86)\Python27\lib\site-packages\flask\app.py&quot;, line 2463, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;C:\Program Files (x86)\Python27\lib\site-packages\flask\app.py&quot;, line 2449, in wsgi_app
    response = self.handle_exception(e)
  File &quot;C:\Program Files (x86)\Python27\lib\site-packages\flask\app.py&quot;, line 1866, in handle_exception
    reraise(exc_type, exc_value, tb)
  File &quot;C:\Program Files (x86)\Python27\lib\site-packages\flask\app.py&quot;, line 2446, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;C:\Program Files (x86)\Python27\lib\site-packages\flask\app.py&quot;, line 1951, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;C:\Program Files (x86)\Python27\lib\site-packages\flask\app.py&quot;, line 1820, in handle_user_exception
    reraise(exc_type, exc_value, tb)
  File &quot;C:\Program Files (x86)\Python27\lib\site-packages\flask\app.py&quot;, line 1949, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;C:\Program Files (x86)\Python27\lib\site-packages\flask\app.py&quot;, line 1935, in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
  File &quot;C:\CliniSearchSAH\CliniSearchFeed\fhir_listener.py&quot;, line 34, in default
    payload_bundle = resource.from_message(payload)
  File &quot;C:\CliniSearchSAH\CliniSearchEngine_new\fhir\resource.py&quot;, line 808, in from_message
    &quot;resource&quot;: handler[resource[&quot;resourceType&quot;]](resource),
  File &quot;C:\CliniSearchSAH\CliniSearchEngine_new\fhir\resource.py&quot;, line 778, in from_dict
    **args)
  File &quot;C:\CliniSearchSAH\CliniSearchEngine_new\fhir\resource.py&quot;, line 731, in __init__
    self.add_name(n[&quot;use&quot;], n[&quot;text&quot;], n[&quot;family&quot;], n[&quot;given&quot;], n.get(&quot;prefix&quot;, &quot;&quot;))
  File &quot;C:\CliniSearchSAH\CliniSearchEngine_new\fhir\resource.py&quot;, line 745, in add_name
    assert isinstance(prefix, str), &quot;str object is expected.&quot;
AssertionError: str object is expected.</textarea>
  </form>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Program Files (x86)\Python27\lib\site-packages\flask\app.py", line 2463, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Program Files (x86)\Python27\lib\site-packages\flask\app.py", line 2449, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Program Files (x86)\Python27\lib\site-packages\flask\app.py", line 1866, in handle_exception
    reraise(exc_type, exc_value, tb)
  File "C:\Program Files (x86)\Python27\lib\site-packages\flask\app.py", line 2446, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Program Files (x86)\Python27\lib\site-packages\flask\app.py", line 1951, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Program Files (x86)\Python27\lib\site-packages\flask\app.py", line 1820, in handle_user_exception
    reraise(exc_type, exc_value, tb)
  File "C:\Program Files (x86)\Python27\lib\site-packages\flask\app.py", line 1949, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Program Files (x86)\Python27\lib\site-packages\flask\app.py", line 1935, in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
  File "C:\CliniSearchSAH\CliniSearchFeed\fhir_listener.py", line 34, in default
    payload_bundle = resource.from_message(payload)
  File "C:\CliniSearchSAH\CliniSearchEngine_new\fhir\resource.py", line 808, in from_message
    "resource": handler[resource["resourceType"]](resource),
  File "C:\CliniSearchSAH\CliniSearchEngine_new\fhir\resource.py", line 778, in from_dict
    **args)
  File "C:\CliniSearchSAH\CliniSearchEngine_new\fhir\resource.py", line 731, in __init__
    self.add_name(n["use"], n["text"], n["family"], n["given"], n.get("prefix", ""))
  File "C:\CliniSearchSAH\CliniSearchEngine_new\fhir\resource.py", line 745, in add_name
    assert isinstance(prefix, str), "str object is expected."
AssertionError: str object is expected.

-->

Thu Jul 2 2020 : 21:33:31: ICIMS HTTP failed HTTP Status: 500, State: Script, Msg: Unable to paser ICIMS JSON error.
